cmake_minimum_required(VERSION 3.16)
project(mpl)


list(PREPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake)

set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

find_package(JPEG REQUIRED)
find_package(PNG REQUIRED)
find_package(OpenMP)

file(GLOB Hh_SRC_FILES libHh/*.cpp)
add_library(Hh ${Hh_SRC_FILES})
target_include_directories(Hh PUBLIC ${CMAKE_CURRENT_SOURCE_DIR})
target_include_directories(Hh PUBLIC ${JPEG_INCLUDE_DIR})
target_link_libraries(Hh PUBLIC ${JPEG_LIBRARIES} ${PNG_LIBRARIES})
if(OpenMP_CXX_FOUND)
  target_link_libraries(Hh PUBLIC OpenMP::OpenMP_CXX)
endif()

#Getting the X11/GLX gui running on Mac seems pretty hopeless.
if(NOT APPLE)
  # This has not been tested on Linux, but may be a good starting point
  find_package(X11 REQUIRED)
  if(X11_FOUND)
    find_package(OpenGL REQUIRED)
    file(GLOB HW_SRC_FILES libHWX/*.cpp)
    add_library(HW ${HW_SRC_FILES})
    target_include_directories(HW PUBLIC ${CMAKE_CURRENT_SOURCE_DIR})
    target_include_directories(HW PUBLIC ${X11_INCLUDE_DIR})
    target_link_libraries(HW PUBLIC ${X11_LIBRARIES} OpenGL::GL)
    if(OpenMP_CXX_FOUND)
      target_link_libraries(HW PUBLIC OpenMP::OpenMP_CXX)
    endif()
  endif()
endif()

function(add_executable_folder name )
  file(GLOB ${name}_SRC_FILES ${name}/*.cpp)
  add_executable(${name} ${${name}_SRC_FILES})
  target_include_directories(${name} PUBLIC ${CMAKE_CURRENT_SOURCE_DIR})
  target_link_libraries(${name} PUBLIC Hh)
  if(OpenMP_CXX_FOUND)
    target_link_libraries(${name} PUBLIC OpenMP::OpenMP_CXX)
  endif()
endfunction()

add_executable_folder(FilterPM)
add_executable_folder(Filtera3d)
add_executable_folder(Filterframe)
add_executable_folder(Filterimage)
add_executable_folder(Filtermesh)
add_executable_folder(Filterprog)
add_executable_folder(MeshDistance)
add_executable_folder(MeshReorder)
add_executable_folder(MeshSimplify)
add_executable_folder(Meshfit)
add_executable_folder(MinCycles)
add_executable_folder(Polyfit)
add_executable_folder(Recon)
add_executable_folder(StitchPM)
add_executable_folder(Subdivfit)

# Filtervideo and VideoViewer depend on symbols in GradientDomainLoop.cpp so
# let's build that as a library they can link to
file(GLOB GradientDomainLoop_SRC_FILES VideoViewer/GradientDomainLoop.cpp)
add_library(GradientDomainLoop ${GradientDomainLoop_SRC_FILES})
target_include_directories(GradientDomainLoop PUBLIC ${CMAKE_CURRENT_SOURCE_DIR})
if(OpenMP_CXX_FOUND)
  target_link_libraries(GradientDomainLoop PUBLIC OpenMP::OpenMP_CXX)
endif()

file(GLOB Filtervideo_SRC_FILES Filtervideo/Filtervideo.cpp)
add_executable(Filtervideo ${Filtervideo_SRC_FILES})
target_include_directories(Filtervideo PUBLIC ${CMAKE_CURRENT_SOURCE_DIR})
target_link_libraries(Filtervideo PUBLIC Hh GradientDomainLoop)
if(OpenMP_CXX_FOUND)
  target_link_libraries(Filtervideo PUBLIC OpenMP::OpenMP_CXX)
endif()

if(X11_FOUND)
  add_executable_folder(G3dOGL)
  add_executable_folder(G3dVec)
  file(GLOB VideoViewer_SRC_FILES VideoViewer/VideoViewer.cpp)
  add_executable(VideoViewer ${VideoViewer_SRC_FILES})
  target_include_directories(VideoViewer PUBLIC ${CMAKE_CURRENT_SOURCE_DIR})
  target_link_libraries(VideoViewer Hh GradientDomainLoop)
  if(OpenMP_CXX_FOUND)
    target_link_libraries(VideoViewer PUBLIC OpenMP::OpenMP_CXX)
  endif()
endif()
